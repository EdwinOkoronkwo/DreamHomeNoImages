{"ast":null,"code":"var _jsxFileName = \"C:\\\\CentennialCollege\\\\COMP214\\\\DreamHomeNoImages\\\\frontend\\\\src\\\\components\\\\branches\\\\BranchForm.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Form, json, redirect, useNavigate } from \"react-router-dom\";\nimport classes from \"./BranchForm.module.css\";\n\n// function BranchForm({ method, branch }) {\n//   const navigate = useNavigate();\n\n//   async function handleSubmit(event) {\n//     event.preventDefault();\n//     const formData = new FormData(event.target);\n\n//     // Prepare data for submission\n//     const branchData = {\n//       branchno: formData.get(\"branchno\"),\n//       street: formData.get(\"street\"),\n//       city: formData.get(\"city\"),\n//       postcode: formData.get(\"postcode\"),\n//     };\n\n//     let url = \"http://localhost:8000/api/branches\";\n//     if (method === \"PATCH\") {\n//       url += `/${branchData.branchno}`;\n//     }\n\n//     try {\n//       const response = await fetch(url, {\n//         method: method,\n//         body: formData,\n//       });\n\n//       if (response.status === 422) {\n//         const data = await response.json();\n//         // Handle validation errors\n//         console.error(data.errors);\n//         return;\n//       }\n\n//       if (!response.ok) {\n//         throw new Error(\"Could not save branch\");\n//       }\n\n//       navigate(\"/branches\");\n//     } catch (error) {\n//       console.error(error.message);\n//     }\n//   }\n\n//   return (\n//     <Form method={method} className={classes.form} onSubmit={handleSubmit}>\n//       <p>\n//         <label htmlFor=\"branchno\">Branch Number</label>\n//         <input\n//           id=\"branchno\"\n//           type=\"text\"\n//           name=\"branchno\"\n//           required\n//           defaultValue={branch && branch.branchno}\n//         />\n//       </p>\n//       <p>\n//         <label htmlFor=\"street\">Street</label>\n//         <input\n//           id=\"street\"\n//           type=\"text\"\n//           name=\"street\"\n//           required\n//           defaultValue={branch && branch.street}\n//         />\n//       </p>\n//       <p>\n//         <label htmlFor=\"city\">City</label>\n//         <input\n//           id=\"city\"\n//           type=\"text\"\n//           name=\"city\"\n//           required\n//           defaultValue={branch && branch.city}\n//         />\n//       </p>\n//       <p>\n//         <label htmlFor=\"postcode\">Postcode</label>\n//         <input\n//           id=\"postcode\"\n//           type=\"text\"\n//           name=\"postcode\"\n//           required\n//           defaultValue={branch && branch.postcode}\n//         />\n//       </p>\n//       <div className={classes.actions}>\n//         <button type=\"button\" onClick={() => navigate(\"..\")}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\">Save</button>\n//       </div>\n//     </Form>\n//   );\n// }\n\n// export default BranchForm;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BranchForm({\n  branch,\n  method\n}) {\n  _s();\n  const navigate = useNavigate();\n  const isEditing = method === \"PATCH\";\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n\n    // Prepare data for submission\n    const branchData = {\n      branchno: formData.get(\"branchno\"),\n      street: formData.get(\"street\"),\n      city: formData.get(\"city\"),\n      postcode: formData.get(\"postcode\")\n    };\n    let url = \"http://localhost:8000/api/branches\";\n    if (method === \"PATCH\") {\n      url += `/${branchData.branchno}`;\n    }\n    try {\n      const response = await fetch(url, {\n        method: method,\n        body: formData\n      });\n      if (response.status === 422) {\n        const data = await response.json();\n        // Handle validation errors\n        console.error(data.errors);\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Could not save branch\");\n      }\n      navigate(\"/branches\");\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: classes.form,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"branchno\",\n        children: \"Branch Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"branchno\",\n        name: \"branchno\",\n        defaultValue: branch ? branch.branchno : \"\",\n        readOnly: isEditing // Make it read-only during editing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        name: \"street\",\n        defaultValue: branch ? branch.street : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        name: \"city\",\n        defaultValue: branch ? branch.city : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postcode\",\n        children: \"Postcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postcode\",\n        name: \"postcode\",\n        defaultValue: branch ? branch.postcode : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: classes.actions,\n      children: isEditing ? \"Update Branch\" : \"Create Branch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(BranchForm, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = BranchForm;\nexport default BranchForm;\nexport async function action({\n  request,\n  params\n}) {\n  const method = request.method;\n  const formData = await request.formData();\n  let url = \"http://localhost:8000/api/branches\";\n  if (method === \"PATCH\") {\n    url += `/${params.branchno}`;\n  }\n  try {\n    const response = await fetch(url, {\n      method: method,\n      body: formData\n    });\n    if (response.status === 422) {\n      return response; // Return response to handle validation errors\n    }\n    if (!response.ok) {\n      throw new Error(\"Could not save branch\");\n    }\n    return redirect(\"/branches\");\n  } catch (error) {\n    console.error(error.message);\n    throw json({\n      message: \"Could not save branch\"\n    }, {\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"BranchForm\");","map":{"version":3,"names":["React","Form","json","redirect","useNavigate","classes","jsxDEV","_jsxDEV","BranchForm","branch","method","_s","navigate","isEditing","handleSubmit","event","preventDefault","formData","FormData","target","branchData","branchno","get","street","city","postcode","url","response","fetch","body","status","data","console","error","errors","ok","Error","message","onSubmit","className","form","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","defaultValue","readOnly","actions","_c","action","request","params","$RefreshReg$"],"sources":["C:/CentennialCollege/COMP214/DreamHomeNoImages/frontend/src/components/branches/BranchForm.js"],"sourcesContent":["import React from \"react\";\nimport { Form, json, redirect, useNavigate } from \"react-router-dom\";\nimport classes from \"./BranchForm.module.css\";\n\n// function BranchForm({ method, branch }) {\n//   const navigate = useNavigate();\n\n//   async function handleSubmit(event) {\n//     event.preventDefault();\n//     const formData = new FormData(event.target);\n\n//     // Prepare data for submission\n//     const branchData = {\n//       branchno: formData.get(\"branchno\"),\n//       street: formData.get(\"street\"),\n//       city: formData.get(\"city\"),\n//       postcode: formData.get(\"postcode\"),\n//     };\n\n//     let url = \"http://localhost:8000/api/branches\";\n//     if (method === \"PATCH\") {\n//       url += `/${branchData.branchno}`;\n//     }\n\n//     try {\n//       const response = await fetch(url, {\n//         method: method,\n//         body: formData,\n//       });\n\n//       if (response.status === 422) {\n//         const data = await response.json();\n//         // Handle validation errors\n//         console.error(data.errors);\n//         return;\n//       }\n\n//       if (!response.ok) {\n//         throw new Error(\"Could not save branch\");\n//       }\n\n//       navigate(\"/branches\");\n//     } catch (error) {\n//       console.error(error.message);\n//     }\n//   }\n\n//   return (\n//     <Form method={method} className={classes.form} onSubmit={handleSubmit}>\n//       <p>\n//         <label htmlFor=\"branchno\">Branch Number</label>\n//         <input\n//           id=\"branchno\"\n//           type=\"text\"\n//           name=\"branchno\"\n//           required\n//           defaultValue={branch && branch.branchno}\n//         />\n//       </p>\n//       <p>\n//         <label htmlFor=\"street\">Street</label>\n//         <input\n//           id=\"street\"\n//           type=\"text\"\n//           name=\"street\"\n//           required\n//           defaultValue={branch && branch.street}\n//         />\n//       </p>\n//       <p>\n//         <label htmlFor=\"city\">City</label>\n//         <input\n//           id=\"city\"\n//           type=\"text\"\n//           name=\"city\"\n//           required\n//           defaultValue={branch && branch.city}\n//         />\n//       </p>\n//       <p>\n//         <label htmlFor=\"postcode\">Postcode</label>\n//         <input\n//           id=\"postcode\"\n//           type=\"text\"\n//           name=\"postcode\"\n//           required\n//           defaultValue={branch && branch.postcode}\n//         />\n//       </p>\n//       <div className={classes.actions}>\n//         <button type=\"button\" onClick={() => navigate(\"..\")}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\">Save</button>\n//       </div>\n//     </Form>\n//   );\n// }\n\n// export default BranchForm;\n\nfunction BranchForm({ branch, method }) {\n  const navigate = useNavigate();\n  const isEditing = method === \"PATCH\";\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n\n    // Prepare data for submission\n    const branchData = {\n      branchno: formData.get(\"branchno\"),\n      street: formData.get(\"street\"),\n      city: formData.get(\"city\"),\n      postcode: formData.get(\"postcode\"),\n    };\n\n    let url = \"http://localhost:8000/api/branches\";\n    if (method === \"PATCH\") {\n      url += `/${branchData.branchno}`;\n    }\n\n    try {\n      const response = await fetch(url, {\n        method: method,\n        body: formData,\n      });\n\n      if (response.status === 422) {\n        const data = await response.json();\n        // Handle validation errors\n        console.error(data.errors);\n        return;\n      }\n\n      if (!response.ok) {\n        throw new Error(\"Could not save branch\");\n      }\n\n      navigate(\"/branches\");\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className={classes.form}>\n      <div>\n        <label htmlFor=\"branchno\">Branch Number</label>\n        <input\n          type=\"text\"\n          id=\"branchno\"\n          name=\"branchno\"\n          defaultValue={branch ? branch.branchno : \"\"}\n          readOnly={isEditing} // Make it read-only during editing\n        />\n      </div>\n      <div>\n        <label htmlFor=\"street\">Street</label>\n        <input\n          type=\"text\"\n          id=\"street\"\n          name=\"street\"\n          defaultValue={branch ? branch.street : \"\"}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"city\">City</label>\n        <input\n          type=\"text\"\n          id=\"city\"\n          name=\"city\"\n          defaultValue={branch ? branch.city : \"\"}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"postcode\">Postcode</label>\n        <input\n          type=\"text\"\n          id=\"postcode\"\n          name=\"postcode\"\n          defaultValue={branch ? branch.postcode : \"\"}\n        />\n      </div>\n      <button type=\"submit\" className={classes.actions}>\n        {isEditing ? \"Update Branch\" : \"Create Branch\"}\n      </button>\n    </form>\n  );\n}\n\nexport default BranchForm;\n\nexport async function action({ request, params }) {\n  const method = request.method;\n  const formData = await request.formData();\n\n  let url = \"http://localhost:8000/api/branches\";\n  if (method === \"PATCH\") {\n    url += `/${params.branchno}`;\n  }\n\n  try {\n    const response = await fetch(url, {\n      method: method,\n      body: formData,\n    });\n\n    if (response.status === 422) {\n      return response; // Return response to handle validation errors\n    }\n\n    if (!response.ok) {\n      throw new Error(\"Could not save branch\");\n    }\n\n    return redirect(\"/branches\");\n  } catch (error) {\n    console.error(error.message);\n    throw json({ message: \"Could not save branch\" }, { status: 500 });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}